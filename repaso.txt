¿Por qué limitar la cantidad de registros de una consulta?

r: por rendimiento

LIMIT es una cláusula opcional de la SELECT declaración que restringe el número de filas devueltas por la consulta.
La cláusula LIMIT se puede usar con o sin la cláusula ORDER BY.

ver ejemplo 

paginacion

cual sentencia o cláusula aplicamos para la paginación de los registros?

r: OFFSET

OFFSET es una cláusula opcional de la SELECT declaración que especifica el número de filas a 
omitir antes de devolver las filas restantes.

para hacer la paginacion se envia la siguiente pagina y el numero de registros por pagina

ver ejemplo 

filtrar registros

cual sentencia o cláusula aplicamos para filtrar los registros?

r: WHERE y AND o OR

WHERE es una cláusula opcional de la SELECT declaración que especifica una condición para filtrar las filas devueltas.
AND y OR operadores se pueden usar para combinar condiciones.

ver ejemplo 

hateoas

que es hateoas?

r: es un estilo de arquitectura de software para crear aplicaciones que se comunican entre sí a través de una red.
Es como que el cliente REST debe ir navegando por la información y no necesita ningún conocimiento previo acerca de
la forma de interactuar con cualquier aplicación o servidor

En otras palabras cuando el servidor nos devuelva la representación de un recurso parte de la información devuelta serán 
identificadores únicos en forma de hipervínculos a otros recursos asociados.

https://www.genbeta.com/desarrollo/entendiendo-el-principio-hateoas

ver ejemplo

rutas por defecto

para que usamos rutas por defecto?

r: para manejar rutas no existentes

si ingresa una ruta erronea provocará una respuesta automática de Express indicando que la ruta y el método
especificado en la consulta no fue encontrada

como declaramos una ruta por defecto en express?

r: app.use((req, res, next) => {
  res.status(404).send('Sorry cant find that!');
});

Con el símbolo asterisco(*) podremos reconocer cualquier URL recibida cuando ninguna de
nuestras rutas coincidan.

Esta ruta debe estar declarada después de todas las anteriores, al final del código de
nuestro servidor.

ver ejemplo

middlewares

que es un middleware?

r: es una función que se ejecuta entre la petición y la respuesta

Las funciones de middleware son funciones que tienen acceso al objeto de solicitud ( req), el objeto de respuesta ( res) 
y la siguiente función de middleware en el ciclo de solicitud-respuesta de la aplicación. La siguiente función de middleware 
se indica comúnmente mediante una variable llamada next.

Las funciones de middleware pueden realizar las siguientes tareas:

-Ejecutar cualquier código.
-Realice cambios en los objetos de solicitud y respuesta.
-Terminar el ciclo de solicitud-respuesta.
-Llame a la siguiente función de middleware en la pila.

el middleware se puede aplicar en distintas niveles de la aplicacion

Middleware a nivel de aplicación

-La función se ejecuta cada vez que la aplicación recibe una solicitud.

Middleware a nivel de enrutador

El middleware a nivel de enrutador funciona de la misma manera que el middleware a nivel de aplicación, excepto que está 
vinculado a una instancia de express.Router().

tambien podemos usar middlewares para manejar errores

https://expressjs.com/en/guide/using-middleware.html

https://expressjs.com/en/guide/writing-middleware.html

https://medium.com/@aarnlpezsosa/middleware-de-manejo-de-errores-32b706dd1bc6